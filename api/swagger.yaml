---
swagger: "2.0"
info:
  description: "API for a very simple bookstore"
  version: "1.0.0"
  title: "Bookstore"
  contact:
    name: "francesco"
    email: "ciao@gmail.com"
  license:
    name: "xyz"
    url: "http://opensource.org/licenses/MIT"
host: "https://prova-hyp-be.herokuapp.com/"
basePath: "/v2"
tags:
- name: "book"
  description: "Book in the store"
- name: "cart"
  description: "The  cart of the bookstore"
- name: "user"
  description: "operation associated to user management"
paths:
  /books:
    get:
      tags:
      - "book"
      summary: "Books available in the inventory"
      description: "This is a  detailed descriptionof the API"
      operationId: "booksGET"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "maximum number of results per page"
        required: false
        type: "integer"
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0"
        required: false
        type: "integer"
      - name: "search"
        in: "query"
        description: "Generic text search"
        required: false
        type: "string"
      responses:
        "200":
          description: "collection of books"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        "404":
          description: "unexpected error"
      x-swagger-router-controller: "Book"
  /books/{bookId}:
    get:
      tags:
      - "book"
      summary: "Findbook by ID"
      description: "Returns the  wanted book"
      operationId: "booksBookIdGET"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "ID of book to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Book"
        "400":
          description: "invalid  ID"
        "404":
          description: "book not found"
      x-swagger-router-controller: "Book"
  /users/login:
    post:
      tags:
      - "user"
      summary: "Login"
      description: "API for the login"
      operationId: "usersLoginPOST"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "formData"
        required: true
        type: "string"
      - name: "password"
        in: "formData"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
        "401":
          description: "unathorized"
      x-swagger-router-controller: "User"
  /users/me:
    get:
      tags:
      - "user"
      summary: "get user information"
      description: "API to  get  thw information on the specific user"
      operationId: "usersMeGET"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/User"
        "401":
          description: "unathorized"
      x-swagger-router-controller: "User"
definitions:
  Book:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
        example: "The  Lord  of  Rings"
      author:
        type: "string"
        example: "Tolkien"
      price:
        $ref: "#/definitions/Amount"
      status:
        type: "string"
        enum:
        - "available"
        - "sold out"
    title: "Boook"
    description: "a book for sale"
    example:
      author: "Tolkien"
      price:
        currency: "eur"
        value: 60274.565803247853182256221771240234375
      id: 0
      title: "The  Lord  of  Rings"
      status: "available"
  Amount:
    type: "object"
    properties:
      value:
        type: "number"
        format: "double"
        minimum: 0.01
        maximum: 100000
      currency:
        $ref: "#/definitions/Currency"
    example:
      currency: "eur"
      value: 60274.565803247853182256221771240234375
  Currency:
    type: "string"
    example: "eur"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      address:
        type: "string"
      creditcard:
        type: "string"
    title: "User"
    description: "a registered user"
    example:
      id: 1
      name: "Francesco"
      address: "DEIB"
      credicard: "fjwfengton40302"
